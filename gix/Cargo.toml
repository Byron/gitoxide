[package]
name = "gix"
repository = "https://github.com/Byron/gitoxide"
description = "Interact with git repositories just like git would"
license = "MIT OR Apache-2.0"
version = "0.51.0"
authors = ["Sebastian Thiel <sebastian.thiel@icloud.com>"]
edition = "2021"
include = ["src/**/*", "LICENSE-*", "CHANGELOG.md"]
rust-version = "1.65"

[lib]
doctest = false
test = true

[[test]]
name = "gix"
path = "tests/gix.rs"
required-features = []

[[test]]
name = "gix-with-regex"
path = "tests/gix-with-regex.rs"
required-features = ["regex"]

[[example]]
name = "clone"
path = "examples/clone.rs"
required-features = ["blocking-network-client"]

[features]

default = ["max-performance-safe", "comfort", "extras"]

#! ### Mutually Exclusive Network Client
#! Either `async-*` or `blocking-*` versions of these toggles may be enabled at a time.

## Make `gix-protocol` available along with an async client.
async-network-client = ["gix-protocol/async-client"]
## Use this if your crate uses `async-std` as runtime, and enable basic runtime integration when connecting to remote servers.
async-network-client-async-std = ["async-std", "async-network-client", "gix-transport/async-std"]
## Make `gix-protocol` available along with a blocking client.
blocking-network-client = ["gix-protocol/blocking-client"]
## Stacks with `blocking-network-client` to provide support for HTTP/S using **curl**, and implies blocking networking as a whole.
blocking-http-transport-curl = ["blocking-network-client", "gix-transport/http-client-curl"]
## Stacks with `blocking-network-client` to provide support for HTTP/S using **reqwest**, and implies blocking networking as a whole.
blocking-http-transport-reqwest = ["blocking-network-client", "gix-transport/http-client-reqwest"]
## Stacks with `blocking-http-transport-reqwest` and enables HTTPS via the `rustls` crate. Note that https isn't available without a selection.
blocking-http-transport-reqwest-rust-tls = ["blocking-http-transport-reqwest", "reqwest-for-configuration-only/rustls-tls", "reqwest-for-configuration-only/trust-dns"]
## Stacks with `blocking-http-transport-reqwest` and enables HTTPS via the `native-tls` crate. Note that https isn't available without a selection.
blocking-http-transport-reqwest-native-tls = ["blocking-http-transport-reqwest", "reqwest-for-configuration-only/default-tls" ]


#! ### Other

## Various additional features and capabilities that are not necessarily part of what most users would need.
extras = ["worktree-stream", "worktree-archive"]

## Make it possible to turn a tree into a stream of bytes, which can be decoded to entries and turned into various other formats.
worktree-stream = ["gix-worktree-stream"]

## Create archives from a tree in the repository, similar to what `git archive` does.
##
## Note that we disable all default features which strips it off all container support, like `tar` and `zip`.
## Your application should add it as dependency and re-activate the desired features.
worktree-archive = ["gix-archive", "worktree-stream"]

## Various progress-related features that improve the look of progress message units.
comfort = ["gix-features/progress-unit-bytes", "gix-features/progress-unit-human-numbers"]

## Data structures implement `serde::Serialize` and `serde::Deserialize`.
serde = [   "dep:serde",
            "gix-pack/serde",
            "gix-object/serde",
            "gix-protocol?/serde",
            "gix-transport?/serde",
            "gix-ref/serde",
            "gix-odb/serde",
            "gix-index/serde",
            "gix-mailmap/serde",
            "gix-url/serde",
            "gix-attributes/serde",
            "gix-ignore/serde",
            "gix-revision/serde",
            "gix-worktree/serde",
            "gix-commitgraph/serde",
            "gix-credentials/serde"]

## Re-export the progress tree root which allows to obtain progress from various functions which take `impl gix::Progress`.
## Applications which want to display progress will probably need this implementation.
progress-tree = ["prodash/progress-tree"]

## Print debugging information about usage of object database caches, useful for tuning cache sizes.
cache-efficiency-debug = ["gix-features/cache-efficiency-debug"]

#! ### Performance

## Activate features that maximize performance, like usage of threads, `zlib-ng` and access to caching in object databases, skipping the ones known to cause compile failures
## on some platforms.
max-performance-safe = [
    "gix-features/parallel",
    "pack-cache-lru-static",
    "pack-cache-lru-dynamic",
    "gix-features/fs-walkdir-parallel"
]

## The tempfile registry uses a better implementation of a thread-safe hashmap, relying on an external crate.
## This may be useful when tempfiles are created and accessed in a massively parallel fashion and you know that this is indeed faster than
## the simpler implementation that is the default.
hp-tempfile-registry = ["gix-tempfile/hp-hashmap"]

## Provide a fixed-size allocation-free LRU cache for packs. It's useful if caching is desired while keeping the memory footprint
## for the LRU-cache itself low.
pack-cache-lru-static = ["gix-pack/pack-cache-lru-static"]

## Provide a hash-map based LRU cache whose eviction is based a memory cap calculated from object data.
pack-cache-lru-dynamic = ["gix-pack/pack-cache-lru-dynamic"]

## Activate other features that maximize performance, like usage of threads, `zlib-ng` and access to caching in object databases.
## Note that some platforms might suffer from compile failures, which is when `max-performance-safe` should be used.
max-performance = [ "max-performance-safe", "gix-features/zlib-ng", "fast-sha1" ]

## If enabled, use assembly versions of sha1 on supported platforms.
## This might cause compile failures as well which is why it can be turned off separately.
fast-sha1 = [ "gix-features/fast-sha1" ]


[dependencies]
gix-utils = { version = "^0.1.5", path = "../gix-utils" }
gix-fs = { version = "^0.4.1", path = "../gix-fs" }
gix-ref = { version = "^0.34.0", path = "../gix-ref" }
gix-discover = { version = "^0.23.0", path = "../gix-discover" }
gix-tempfile = { version = "^7.0.0", path = "../gix-tempfile", default-features = false, features = ["signals"] }
gix-lock = { version = "^7.0.0", path = "../gix-lock" }
gix-validate = { version = "^0.8.0", path = "../gix-validate" }
gix-sec = { version = "^0.8.4", path = "../gix-sec" }
gix-date = { version = "^0.7.2", path = "../gix-date" }
gix-refspec = { version = "^0.15.0", path = "../gix-refspec" }
gix-filter = { version = "^0.3.0", path = "../gix-filter" }

gix-config = { version = "^0.27.0", path = "../gix-config" }
gix-odb = { version = "^0.51.0", path = "../gix-odb" }
gix-hash = { version = "^0.11.4", path = "../gix-hash" }
gix-object = { version = "^0.34.0", path = "../gix-object" }
gix-actor = { version = "^0.24.2", path = "../gix-actor" }
gix-pack = { version = "^0.41.0", path = "../gix-pack", features = ["object-cache-dynamic"] }
gix-revision = { version = "^0.19.0", path = "../gix-revision" }
gix-negotiate = { version = "^0.6.0", path = "../gix-negotiate" }

gix-path = { version = "^0.8.4", path = "../gix-path" }
gix-url = { version = "^0.21.1", path = "../gix-url" }
gix-traverse = { version = "^0.31.0", path = "../gix-traverse" }
gix-diff = { version = "^0.34.0", path = "../gix-diff" }
gix-mailmap = { version = "^0.16.1", path = "../gix-mailmap" }
gix-features = { version = "^0.32.1", path = "../gix-features", features = ["progress", "once_cell"] }
gix-trace = { version = "^0.1.3", path = "../gix-trace" }

gix-attributes = { version = "^0.16.0", path = "../gix-attributes" }
gix-ignore = { version = "^0.5.1", path = "../gix-ignore" }
gix-glob = { version = "^0.10.2", path = "../gix-glob" }
gix-credentials = { version = "^0.17.1", path = "../gix-credentials" }
gix-prompt = { version = "^0.5.5", path = "../gix-prompt" }
gix-index = { version = "^0.22.0", path = "../gix-index" }
gix-worktree = { version = "^0.24.0", path = "../gix-worktree" }
gix-worktree-state = { version = "^0.1.0", path = "../gix-worktree-state" }
gix-hashtable = { version = "^0.2.4", path = "../gix-hashtable" }
gix-commitgraph = { version = "^0.18.2", path = "../gix-commitgraph" }
gix-pathspec = { version = "^0.1.0", path = "../gix-pathspec" }

gix-worktree-stream = { version = "^0.3.0", path = "../gix-worktree-stream", optional = true }
gix-archive = { version = "^0.3.0", path = "../gix-archive", default-features = false, optional = true }

# For communication with remotes
gix-protocol = { version = "^0.37.0", path = "../gix-protocol", optional = true }
gix-transport = { version = "^0.34.2", path = "../gix-transport", optional = true }

# Just to get the progress-tree feature
prodash = { version = "25.0", optional = true, default-features = false, features = ["progress-tree"] }
once_cell = "1.14.0"
signal-hook = { version = "0.3.9", default-features = false }
thiserror = "1.0.26"
log = "0.4.14"
serde = { version = "1.0.114", optional = true, default-features = false, features = ["derive"]}
smallvec = "1.9.0"
async-std = { version = "1.12.0", optional = true }

## For use in rev-parse, which provides searching commits by running a regex on their message.
##
## If disabled, the text will be search verbatim in any portion of the commit message, similar to
## how a simple unanchored regex of only 'normal' characters would work.
regex = { version = "1.6.0", optional = true, default-features = false, features = ["std"] }

# For internal use to allow pure-Rust builds without openssl.
reqwest-for-configuration-only = { package = "reqwest", version = "0.11.13", default-features = false, optional = true }

# for `interrupt` module
parking_lot = "0.12.1"

document-features = { version = "0.2.0", optional = true }

[target.'cfg(target_vendor = "apple")'.dependencies]
unicode-normalization = { version = "0.1.19", default-features = false }

[dev-dependencies]
gix-testtools = { path = "../tests/tools" }
is_ci = "1.1.1"
anyhow = "1"
walkdir = "2.3.2"
serial_test = { version = "2.0.0", default-features = false }
async-std = { version = "1.12.0", features = ["attributes"] }

[package.metadata.docs.rs]
features = ["document-features", "max-performance", "blocking-network-client", "blocking-http-transport-curl", "serde"]
rustdoc-args = ["--cfg", "docsrs"]
